<?php declare(strict_types=1);

namespace lindesbs\toolbox\Command;

use Contao\Controller;
use Contao\CoreBundle\Framework\ContaoFramework;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Parameter;
use Nette\PhpGenerator\Printer;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(name: 'toolbox:dcabuilder:entity')]
class DCAEntityBuilder extends Command
{

    public function __construct(
        private readonly ContaoFramework $contaoFramework
    )
    {
        parent::__construct();
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input, $output);

        $this->contaoFramework->initialize();

        $strDCA = "tl_page";


        Controller::loadDataContainer($strDCA);
        Controller::loadLanguageFile($strDCA);

        $dca = ucfirst(str_replace("tl_", "", $strDCA));

        $class = new ClassType($dca . 'Entity');

        $class
            ->addComment(sprintf("Description of DCA %s", $strDCA))
            ->addComment('autogenerated');

        foreach ($GLOBALS['TL_DCA'][$strDCA]['fields'] as $key => $value) {
            $this->extractField($class, $key, $value);
        }

        $printer = new Printer;
        $io->writeln($printer->printClass($class));

        return Command::SUCCESS;
    }

    /**
     * @param ClassType $class
     * @param string $fieldNameInput
     * @param array $fieldConfig
     * @return ClassType
     */
    public function extractField(ClassType $class, string $fieldNameInput, array $fieldConfig): ClassType
    {
        $fieldName = $fieldNameInput;
        $fieldType = $this->getFieldType($fieldConfig);

        $strComment = "";

        if ((array_key_exists('label', $fieldConfig)) &&
            ($fieldConfig['label']) &&
            (count($fieldConfig['label']) > 0))
            $strComment = implode(PHP_EOL, $fieldConfig['label']);

        $parameter = new Parameter($fieldName);
        $parameter->setType($fieldType);

        $class->addProperty($fieldName)->setProtected()->setType($fieldType)->addComment($strComment);

        $class->addMethod("set" . ucfirst($fieldName))
            ->setPublic()
            ->setReturnType("void")
            ->setParameters([$parameter])
            ->setBody(sprintf("\$this->%s = \$%s;", $fieldName, $fieldName));

        $class->addMethod("get" . ucfirst($fieldName))
            ->setPublic()
            ->setReturnType($fieldType)
            ->setBody(sprintf("return \$this->%s;", $fieldName));


        return $class;
    }

    private function getFieldType(array $fieldConfig): string
    {
        if (!array_key_exists('sql', $fieldConfig))
            return "string";

        $sql = $fieldConfig['sql'];

        if (!$sql)
            return "string";

        if (str_contains($sql, "int("))
            return "int";

        if (str_contains($sql, "char(")) // includes varchar
            return "string";

        if (str_contains($sql, "text "))
            return "string";

        if (str_contains($sql, "blob "))
            return "string";

        if (str_contains($sql, "binary"))
            return "string";


        dd($sql);

    }
}